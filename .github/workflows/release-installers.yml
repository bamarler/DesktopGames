name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DESKTOP_GAMES_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false

  build:
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Clean install dependencies
      run: |
        rm -rf node_modules
        npm install
        
    - name: Set permissions for electron-builder
      run: chmod +x ./node_modules/.bin/electron-builder
      if: runner.os != 'Windows'

    - name: Build with Electron Builder
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.DESKTOP_GAMES_TOKEN }}

    - name: Set asset path and name
      id: set_asset
      run: |
        echo "OS_NAME=${{ matrix.os }}"
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "::set-output name=asset_path::./dist/desktop-games-Setup.exe"
          echo "::set-output name=asset_name::desktop-games-Setup.exe"
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          echo "::set-output name=asset_path::./dist/desktop-games.dmg"
          echo "::set-output name=asset_name::desktop-games.dmg"
        else
          echo "::set-output name=asset_path::./dist/desktop-games.AppImage"
          echo "::set-output name=asset_name::desktop-games.AppImage"
        fi
      shell: bash
      
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DESKTOP_GAMES_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ${{ steps.set_asset.outputs.asset_path }}
        asset_name: ${{ steps.set_asset.outputs.asset_name }}
        asset_content_type: application/octet-stream
