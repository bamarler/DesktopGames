name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DESKTOP_GAMES_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false

  build:
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build with pyinstaller (Windows)
      if: runner.os == 'Windows'
      run: |
        ls
        pyinstaller DesktopGames-win.spec
      env:
        GH_TOKEN: ${{ secrets.DESKTOP_GAMES_TOKEN }}
    
    - name: Build with pyinstaller (Unix)
      if: runner.os != 'Windows'
      run: |
        cd $GITHUB_WORKSPACE
        ls
        pyinstaller DesktopGames-unix.spec
        chmod +x dist\DesktopGames
      env:
        GH_TOKEN: ${{ secrets.DESKTOP_GAMES_TOKEN }}
    
    - name: Verify asset existence
      run: ls ./dist
      shell: bash

    - name: Create ZIP archive
      id: create_zip
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          zip -j dist/desktop-games-${{ matrix.os }}.zip dist/DesktopGames.exe
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          zip -r dist/desktop-games-${{ matrix.os }}.zip dist/DesktopGames
        else
          zip -j dist/desktop-games-${{ matrix.os }}.zip dist/DesktopGames
        fi
      shell: bash
  
    - name: Set asset path and name
      id: set_asset
      run: |
        echo "OS_NAME=${{ matrix.os }}"
        echo "::set-output name=asset_path::./dist/desktop-games-${{ matrix.os }}.zip"
        echo "::set-output name=asset_name::desktop-games-${{ matrix.os }}.zip"
      shell: bash
  
    - name: Verify asset existence
      run: ls ./dist
      shell: bash

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DESKTOP_GAMES_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ${{ steps.set_asset.outputs.asset_path }}
        asset_name: ${{ steps.set_asset.outputs.asset_name }}
        asset_content_type: application/zip
